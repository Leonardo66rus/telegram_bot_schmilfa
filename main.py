import os
import sqlite3
import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

TOKEN = os.getenv('TOKEN')
ADMIN_IDS = [int(id) for id in os.getenv('ADMIN_IDS', '').split(',') if id.strip()]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
application = Application.builder().token(TOKEN).build()

# –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users
                      (id INTEGER PRIMARY KEY AUTOINCREMENT,
                       user_id INTEGER UNIQUE)''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS guides
                      (id INTEGER PRIMARY KEY AUTOINCREMENT,
                       title TEXT UNIQUE,
                       content TEXT)''')
    conn.commit()
    return conn, cursor

def load_text(file_path):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        if os.path.exists(file_path):
            with open(file_path, 'r', encoding='utf-8') as f:
                return f.read().strip()  # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        logger.warning(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞."

def save_user_id(user_id, cursor, conn):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
        conn.commit()
        logger.info(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def create_reply_markup(keyboard):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False, selective=False)

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
main_keyboard = [["ATS", "ETS 2"]]
game_keyboard = [["–ì–∞–π–¥—ã", "–ú–æ–¥—ã"], ["–û–±–∑–æ—Ä –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ç—á–∞", "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏"], ["–ù–∞–∑–∞–¥"]]
ets_game_keyboard = [["–ì–∞–π–¥—ã", "–ú–æ–¥—ã"], ["–û–±–∑–æ—Ä –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ç—á–∞", "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏"], ["–°–±–æ—Ä–∫–∏ –∫–∞—Ä—Ç"], ["–ù–∞–∑–∞–¥"]]
map_packs_keyboard = [["–ó–æ–ª–æ—Ç–∞—è —Å–±–æ—Ä–∫–∞ –†—É—Å—Å–∫–∏—Ö –∫–∞—Ä—Ç"], ["–ù–∞–∑–∞–¥"]]
admin_keyboard = [["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"], ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
guides_keyboard = [["–ì–∞–π–¥ –¥–ª—è –Ω–æ–≤–∏—á–∫–∞"], ["–í–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å –∏ —Å–≤–æ–±–æ–¥–Ω—É—é –∫–∞–º–µ—Ä—É"], ["–ö–æ–Ω—Å–æ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"], ["–ö–æ–Ω–≤–æ–π –Ω–∞ 8+ —á–µ–ª–æ–≤–µ–∫"], ["–ù–∞–∑–∞–¥"]]
mods_keyboard = [["–¢–∞–±–ª–∏—Ü–∞ –º–æ–¥–æ–≤", "–¢–∞–ª–∏—Å–º–∞–Ω '–®–º–∏–ª—Ñ–∞' –≤ –∫–∞–±–∏–Ω—É"], ["–ù–∞–∑–∞–¥"]]
back_keyboard = [["–ù–∞–∑–∞–¥"]]

async def main_menu(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    if not user.is_bot:
        conn, cursor = get_db_connection()
        save_user_id(user.id, cursor, conn)
        conn.close()
        logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        keyboard = main_keyboard.copy()
        if user.id in ADMIN_IDS:
            keyboard.append(["–ê–¥–º–∏–Ω"])
        reply_markup = create_reply_markup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É :", reply_markup=reply_markup)
        context.user_data['previous_menu'] = 'start_menu'
        context.user_data['current_menu'] = 'main_menu'
    else:
        logger.info(f"–ë–æ—Ç {user.id} –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –±–æ—Ç.")

async def admin_menu(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    if user.id in ADMIN_IDS:
        reply_markup = create_reply_markup(admin_keyboard)
        await update.message.reply_text("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
        context.user_data['previous_menu'] = 'main_menu'
        context.user_data['current_menu'] = 'admin_menu'
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        await go_back(update, context)

async def show_mods(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    if not user.is_bot:
        reply_markup = create_reply_markup(mods_keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)
        context.user_data['previous_menu'] = context.user_data.get('current_menu', 'game_menu')
        context.user_data['current_menu'] = 'mods'
    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")

async def show_mods_table(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    if not user.is_bot:
        mods_table_text = load_text('data/mods/mods_table.txt')

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è —Å—Å—ã–ª–∫–∏
        mods_link_button = InlineKeyboardMarkup([[InlineKeyboardButton("–°—Å—ã–ª–∫–∞ –Ω–∞ –º–æ–¥—ã", url="https://clck.ru/Xxs42")]])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è —Å—Å—ã–ª–∫–∏
        await update.message.reply_text(mods_table_text, reply_markup=mods_link_button)

        context.user_data['previous_menu'] = 'mods'
        context.user_data['current_menu'] = 'mods_table'
    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")

async def show_schmilfa_in_cabin(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    if not user.is_bot:
        selected_game = context.user_data.get('selected_game', 'ATS')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ATS
        schmilfa_file = f'data/mods/schmilfa_in_cabin_{selected_game.lower()}.txt'  # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        schmilfa_text = load_text(schmilfa_file)  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞
        reply_markup = create_reply_markup(back_keyboard)
        await update.message.reply_text(schmilfa_text, reply_markup=reply_markup)
        context.user_data['previous_menu'] = 'mods'
        context.user_data['current_menu'] = 'schmilfa_in_cabin'
    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")

async def show_guides(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    if not user.is_bot:
        reply_markup = create_reply_markup(guides_keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–∞–π–¥:", reply_markup=reply_markup)
        context.user_data['previous_menu'] = context.user_data.get('current_menu', 'game_menu')
        context.user_data['current_menu'] = 'guides'
    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")

async def show_social(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    if not user.is_bot:
        social_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏! üì±\n\n–û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –Ω–∞ —Å–≤—è–∑–∏ –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –≤—Å–µ–º–∏ –≤–∞–∂–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏:"

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π —Å —ç–º–æ–¥–∑–∏
        social_buttons = [
            [InlineKeyboardButton("‚úàÔ∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –≤ Telegram", url="https://t.me/banka_alivok")],
            [InlineKeyboardButton("üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ YouTube", url="https://www.youtube.com/user/TheAlive55?sub_confirmation=1")],
            [InlineKeyboardButton("üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –î–∑–µ–Ω", url="https://dzen.ru/thealive55")]
        ]

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ReplyKeyboardMarkup –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        reply_keyboard = back_keyboard  # –£–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ [['–ù–∞–∑–∞–¥']]
        reply_markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
        await update.message.reply_text(social_text, reply_markup=InlineKeyboardMarkup(social_buttons))
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é:", reply_markup=reply_markup)

        context.user_data['previous_menu'] = context.user_data.get('current_menu', 'game_menu')
        context.user_data['current_menu'] = 'social'
    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")

async def show_patch(update: Update, context: CallbackContext, game: str) -> None:
    user = update.message.from_user
    if not user.is_bot:
        patch_file = f'data/patches/patch_{game.lower()}.txt'
        patch_text = load_text(patch_file)
        if "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω." in patch_text or "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞" in patch_text:
            patch_text = f"–û–±–∑–æ—Ä –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ç—á–∞ –¥–ª—è {game} –Ω–µ –Ω–∞–π–¥–µ–Ω."
        reply_markup = create_reply_markup(back_keyboard)
        await update.message.reply_text(patch_text, reply_markup=reply_markup)
        context.user_data['previous_menu'] = context.user_data.get('current_menu', 'game_menu')
        context.user_data['current_menu'] = f'{game.lower()}_patch'
    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")

async def show_convoy_info(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    if not user.is_bot:
        convoy_text = load_text('data/guides/convoy_8plus.txt')
        reply_markup = create_reply_markup(back_keyboard)
        await update.message.reply_text(convoy_text, reply_markup=reply_markup)
        context.user_data['previous_menu'] = 'guides'
        context.user_data['current_menu'] = 'convoy'
    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")

async def game_menu(update: Update, context: CallbackContext, game: str) -> None:
    user = update.message.from_user
    if not user.is_bot:
        if game == "ETS 2":
            reply_markup = create_reply_markup(ets_game_keyboard)
        else:
            reply_markup = create_reply_markup(game_keyboard)
        await update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è {game}:", reply_markup=reply_markup)
        context.user_data['previous_menu'] = 'main_menu'
        context.user_data['current_menu'] = f'{game.lower()}_menu'
    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")

async def handle_guide_selection(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    if not user.is_bot:
        topic = update.message.text
        if topic == "–ö–æ–Ω–≤–æ–π –Ω–∞ 8+ —á–µ–ª–æ–≤–µ–∫":
            await show_convoy_info(update, context)
        else:
            file_map = {
                "–í–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å –∏ —Å–≤–æ–±–æ–¥–Ω—É—é –∫–∞–º–µ—Ä—É": 'data/guides/console_on.txt',
                "–ö–æ–Ω—Å–æ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã": 'data/guides/console_commands.txt',
                "–ì–∞–π–¥ –¥–ª—è –Ω–æ–≤–∏—á–∫–∞": 'data/guides/guide.txt'
            }
            text = load_text(file_map.get(topic, 'data/guides/guide.txt'))
            reply_markup = create_reply_markup(back_keyboard)
            await update.message.reply_text(text, reply_markup=reply_markup)
            context.user_data['previous_menu'] = 'guides'
            context.user_data['current_menu'] = 'guide'
    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")

async def handle_game_selection(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    if not user.is_bot:
        game = update.message.text
        if game in ["ATS", "ETS 2"]:
            context.user_data['selected_game'] = game  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É –≤ user_data
            await game_menu(update, context, game)
        elif user.id in ADMIN_IDS and game == "–ê–¥–º–∏–Ω":
            await admin_menu(update, context)
    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")

async def go_back(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    if not user.is_bot:
        previous_menu = context.user_data.get('previous_menu', 'main_menu')
        current_menu = context.user_data.get('current_menu', '')

        if current_menu == 'convoy':
            await show_guides(update, context)
        elif previous_menu == 'start_menu':
            await main_menu(update, context)
        elif previous_menu == 'main_menu':
            await main_menu(update, context)
        elif 'menu' in previous_menu:
            game = "ATS" if "ats" in previous_menu else "ETS 2"
            await game_menu(update, context, game)
        elif current_menu == 'admin_menu':
            await main_menu(update, context)
        elif current_menu == 'map_packs':
            await game_menu(update, context, 'ETS 2')
        else:
            await show_guides(update, context) if previous_menu == 'guides' else \
            await show_mods(update, context) if previous_menu == 'mods' else \
            await show_social(update, context) if previous_menu == 'social' else \
            await main_menu(update, context)
    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")

async def handle_mods_selection(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    if not user.is_bot:
        current_menu = context.user_data.get('current_menu', '')
        selected_game = context.user_data.get('selected_game', 'ATS')  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É

        if update.message.text in ["–ì–∞–π–¥—ã", "–ú–æ–¥—ã", "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏", "–û–±–∑–æ—Ä –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ç—á–∞"]:
            if update.message.text == "–ì–∞–π–¥—ã":
                await show_guides(update, context)
            elif update.message.text == "–ú–æ–¥—ã":
                await show_mods(update, context)
            elif update.message.text == "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏":
                await show_social(update, context)
            elif update.message.text == "–û–±–∑–æ—Ä –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ç—á–∞":
                await show_patch(update, context, selected_game)
        elif update.message.text == "–°–±–æ—Ä–∫–∏ –∫–∞—Ä—Ç" and selected_game == "ETS 2":
            reply_markup = create_reply_markup(map_packs_keyboard)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–±–æ—Ä–∫—É –∫–∞—Ä—Ç:", reply_markup=reply_markup)
            context.user_data['previous_menu'] = 'ets_menu'
            context.user_data['current_menu'] = 'map_packs'
        elif update.message.text == "–ó–æ–ª–æ—Ç–∞—è —Å–±–æ—Ä–∫–∞ –†—É—Å—Å–∫–∏—Ö –∫–∞—Ä—Ç" and context.user_data.get('current_menu', '') == 'map_packs':
            gold_rus_text = load_text('data/maps/gold_rus.txt')
            reply_markup = create_reply_markup(back_keyboard)
            await update.message.reply_text(gold_rus_text, reply_markup=reply_markup)
        elif update.message.text == "–ù–∞–∑–∞–¥":
            await go_back(update, context)
        elif update.message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await main_menu(update, context)
        elif update.message.text in ["–ì–∞–π–¥ –¥–ª—è –Ω–æ–≤–∏—á–∫–∞", "–í–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å –∏ —Å–≤–æ–±–æ–¥–Ω—É—é –∫–∞–º–µ—Ä—É", "–ö–æ–Ω—Å–æ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", "–ö–æ–Ω–≤–æ–π –Ω–∞ 8+ —á–µ–ª–æ–≤–µ–∫"]:
            await handle_guide_selection(update, context)
        elif update.message.text == "–¢–∞–±–ª–∏—Ü–∞ –º–æ–¥–æ–≤":
            await show_mods_table(update, context)
        elif update.message.text == "–¢–∞–ª–∏—Å–º–∞–Ω '–®–º–∏–ª—Ñ–∞' –≤ –∫–∞–±–∏–Ω—É":
            await show_schmilfa_in_cabin(update, context)
        elif user.id in ADMIN_IDS and update.message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await admin_stats(update, context)
    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")

async def ignore_text_input(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    if not user.is_bot:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", reply_markup=create_reply_markup(back_keyboard))
    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")

async def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    if not user.is_bot:
        user_id = user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
        await main_menu(update, context)
    else:
        logger.info(f"–ë–æ—Ç {user.id} –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")

async def admin_stats(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    if user.id in ADMIN_IDS:
        conn, cursor = get_db_connection()
        cursor.execute("SELECT COUNT(*) FROM users")
        count = cursor.fetchone()[0]
        conn.close()
        await update.message.reply_text(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {count}")
        context.user_data['previous_menu'] = 'admin_menu'
        context.user_data['current_menu'] = 'admin_stats'
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & filters.Regex('^(ATS|ETS 2|–ê–¥–º–∏–Ω)$'), handle_game_selection))
application.add_handler(MessageHandler(filters.TEXT & filters.Regex('^(–ì–∞–π–¥—ã|–ú–æ–¥—ã|–û–±–∑–æ—Ä –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ç—á–∞|–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏|–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é|–ù–∞–∑–∞–¥|–ì–∞–π–¥ –¥–ª—è –Ω–æ–≤–∏—á–∫–∞|–í–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å –∏ —Å–≤–æ–±–æ–¥–Ω—É—é –∫–∞–º–µ—Ä—É|–ö–æ–Ω—Å–æ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã|–ö–æ–Ω–≤–æ–π –Ω–∞ 8\+ —á–µ–ª–æ–≤–µ–∫|–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|–°–±–æ—Ä–∫–∏ –∫–∞—Ä—Ç|–ó–æ–ª–æ—Ç–∞—è —Å–±–æ—Ä–∫–∞ –†—É—Å—Å–∫–∏—Ö –∫–∞—Ä—Ç)$'), handle_mods_selection))
application.add_handler(MessageHandler(filters.TEXT & filters.Regex('^(–¢–∞–±–ª–∏—Ü–∞ –º–æ–¥–æ–≤|–¢–∞–ª–∏—Å–º–∞–Ω \'–®–º–∏–ª—Ñ–∞\' –≤ –∫–∞–±–∏–Ω—É)$'), handle_mods_selection))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, ignore_text_input))

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    try:
        application.run_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ
        conn, _ = get_db_connection()
        conn.close()